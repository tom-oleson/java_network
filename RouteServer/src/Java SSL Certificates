Java SSL Certificates

keytool

-Djavax.net.ssl.keyStore=/path/ks-name
-Djavax.net.ssl.trustStore=/path/ts-name



Import an RFC/text-formatted certificate into a JKS store. Certificates are often stored using the printable encoding format defined by the Internet RFC (Request for Comments) 1421 standard instead of their binary encoding. This certificate format, also known as Base 64 encoding, facilitates exporting certificates to other applications by email or through some other mechanism.

keytool -import -noprompt -trustcacerts -alias ${cert.alias} -file 
${cert.file} -keystore ${keystore.file} -storepass ${keystore.pass}


==============================
https://stackoverflow.com/questions/2138940/import-pem-into-java-key-store

I'm always forgetting how to do this because it's something that I just do once in a while, this is one possible solution, and it just works:

    Go to your favourite browser and download the main certificate from the secured website.

    Execute the two following lines of code:

    $ openssl x509 -outform der -in GlobalSignRootCA.crt -out GlobalSignRootCA.der
    $ keytool -import -alias GlobalSignRootCA -keystore GlobalSignRootCA.jks -file GlobalSignRootCA.der

    If executing in Java SE environment add the following options:

    $ java -Djavax.net.ssl.trustStore=GlobalSignRootCA.jks -Djavax.net.ssl.trustStorePassword=trustStorePassword -jar MyJar.jar

    Or add the following to the java code:

    System.setProperty("javax.net.ssl.trustStore", "GlobalSignRootCA.jks");
    System.setProperty("javax.net.ssl.trustStorePassword","trustStorePassword");

The other option for step 2 is to just use the keytool command. Below is an example with a chain of certificates:

$ keytool -import -file org.eu.crt -alias orgcrt -keystore globalsignrs.jks
$ keytool -import -file GlobalSignOrganizationValidationCA-SHA256-G2.crt -alias globalsignorgvalca -keystore globalsignrs.jks
$ keytool -import -file GlobalSignRootCA.crt -alias globalsignrootca -keystore globalsignrs.jks


================================


If you need to check the information within a certificate, or Java keystore, use these commands.

    Print a stand-alone certificate
    $ keytool -printcert -v -file mydomain.crt

    List certificates in a Java keystore
    $ keytool -list -v -keystore keystore.jks

    List a particular keystore entry using an alias
    $ keytool -list -v -keystore keystore.jks -alias mydomain

    List certcs in cacerts (password: changeit) usually in $JAVA_HOME/jre/lib/security
    $ keytool -list -v -cacerts


=============================
Create a self-signed certicate

openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout key.pem -out cert.pem

--OR--

openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout key.pem -out cert.pem



=========================================================================

SSL X.509 Certificate

+ Has a Public Key
+ Has a Certificate Authority Signature

Common Name (CN) must be the domain name of the site.
CN=www.efx.com (by convention also works for naked domain: efx.com)



Chain of Trust
==============
my_cert --> ca_cert --> ca_root_cert

